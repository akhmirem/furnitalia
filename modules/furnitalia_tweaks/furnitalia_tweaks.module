<?php
// $Id$

/**
 * @file
 * A module implementing tweaks and misc Drupal API hooks.
 *
 */

/**
* Implements hook_menu()
*/
function furnitalia_tweaks_menu() {
	$items['contact/ajax'] = array (
		'page callback' => 'furnitalia_tweaks_contact_js',
		'access callback' => TRUE, 
		'type' => MENU_CALLBACK,
	);
	$items['request/%node/ajax'] = array (
		'page callback' => 'furnitalia_tweaks_contact_js',
		'page arguments' => array(1, '34'),
		'access callback' => TRUE, 
		'type' => MENU_CALLBACK,
	);
	$items['interior-design'] = array(
		'title' => 'Interior Design Services',
	    'page callback' => 'theme',
	    'page arguments' => array('interior-design'),
	    'access callback' => TRUE,
	    'type' => MENU_NORMAL_ITEM,
    );

	$items['my-favorites'] = array(
		'title' => 'My Favorites',
	    'page callback' => 'furnitalia_tweaks_favorites_list',
	    'access callback' => TRUE,
	    'type' => MENU_NORMAL_ITEM,
    );
    $items['my-orders'] = array(
		'title' => 'My Orders',
	    'page callback' => 'furnitalia_tweaks_orders',
	    'access callback' => TRUE,
	    'type' => MENU_NORMAL_ITEM,
    );
    $items['front'] = array (
		'page callback' => 'furnitalia_tweaks_front_page',
		'access callback' => TRUE, 
		'type' => MENU_CALLBACK,
	);
	$items['products/ajax'] = array (
		'page callback' => 'furnitalia_tweaks_products_ajax',
		'access callback' => TRUE, 
		'type' => MENU_CALLBACK,
	);
	$items['about'] = array(
		'title' => 'About Furnitalia',
	    'page callback' => 'furnitalia_tweaks_about',
	    'access callback' => TRUE,
	    'type' => MENU_NORMAL_ITEM,
    );
    $items['shipping-deliveries'] = array(
		'title' => 'Shipping and Deliveries',
	    'page callback' => 'theme',
	    'page arguments' => array('shipping-deliveries'),
	    'access callback' => TRUE,
	    'type' => MENU_NORMAL_ITEM,
    );
    $items['service-terms'] = array(
		'title' => 'Terms of Service',
	    'page callback' => 'theme',
	    'page arguments' => array('service-terms'),
	    'access callback' => TRUE,
	    'type' => MENU_NORMAL_ITEM,
    );
    $items['privacy-policy'] = array(
		'title' => 'Privacy Policy',
	    'page callback' => 'theme',
	    'page arguments' => array('privacy-policy'),
	    'access callback' => TRUE,
	    'type' => MENU_NORMAL_ITEM,
    );
    $items['faq'] = array(
		'title' => 'Frequently Asked Questions',
	    'page callback' => 'theme',
	    'page arguments' => array('faq'),
	    'access callback' => TRUE,
	    'type' => MENU_NORMAL_ITEM,
    );
	$items['catalogs'] = array(
		'title' => 'Catalogs',
	    'page callback' => 'theme',
	    'page arguments' => array('catalogs'),
	    'access callback' => TRUE,
	    'type' => MENU_NORMAL_ITEM,
    );
    $items['contact'] = array(
		'title' => 'Contact Us',
	    'page callback' => 'theme',
	    'page arguments' => array('contact'),
	    'access callback' => TRUE,
	    'type' => MENU_NORMAL_ITEM,
    );
    $items['collections'] = array(
    	'page callback' => 'furnitalia_tweaks_taxonomy_term_page',
    	'title' => 'Furniture Collections',
		'access callback' => TRUE, 
		'type' => MENU_CALLBACK,
    );
    $items['natuzzi-italia'] = array (
		'page callback' => 'furnitalia_tweaks_brand_cat_page',
		'page arguments' => array('italia'),
    	'title' => 'Natuzzi Italia Furniture Collections',
		'access callback' => TRUE, 
		'type' => MENU_CALLBACK,
	);
	$items['natuzzi-editions'] = array (
		'page callback' => 'furnitalia_tweaks_brand_cat_page',
		'page arguments' => array('editions'),
    	'title' => 'Natuzzi Editions Furniture Collections',		
		'access callback' => TRUE, 
		'type' => MENU_CALLBACK,
	);
	return $items;
}

function furnitalia_tweaks_get_page_title($tid) {

  $term = taxonomy_get_term($tid);
    
  return $term->name ? $term->name : "Furnitalia Collections";
}

function furnitalia_tweaks_brand_cat_page($brand, $cat = NULL, $subcat = NULL) {
	
	if ($brand == 'italia') {
		$brand_tid = 21;
		$display_id = "page_italia";
	} else if ($brand == 'editions') {
		$brand_tid = 22;
		$display_id = "page_editions";
	}
	
	//root path -- no category ID give -- show brand description info
	if (!isset($cat)) {
		$build = array();
		
		if ($brand == 'italia') {			

			$build['desc'] = array(
				'#markup' => theme('natuzzi-cat'), //"Natuzzi Italia -- Description Page To Go Here",
			);
			
		} else if ($brand == 'editions') {
			$build['desc'] = array(
				'#markup' => theme('editions-cat'), //"Natuzzi Editions -- Description Page To Go Here",
			);
		}
		
		drupal_add_js(drupal_get_path('theme', 'furnitheme') . "/js/jquery.bgpos.js");
		drupal_add_library('system', 'drupal.ajax');
		
		$build['add'] = array(
			'#markup' => '<div id="menu-pic-wrapper">
					  		<div id="menu-pic" class="menu-hover loading">&nbsp;</div>
					  	</div>',
		);
		
		return $build;
	}
	
	$alias = $cat;
	
	if (isset($subcat)) {
		$alias .= '/' . $subcat;
	}
	
	$normal_path = explode('/', drupal_get_normal_path($alias)); //TO-DO check for validity
	if (is_array($normal_path) && count($normal_path) == 3) { //taxonomy/term/xxx
		$tid = $normal_path[2];
		
		$term = taxonomy_term_load($tid);

		$view_name = 'taxonomy_term';
		$args = array($tid);
		
		$title = $brand == 'italia' ? 'Natuzzi Italia' : 'Natuzzi Editions';
		$title .= " - " . $term->name;		
		drupal_set_title($title);
		
		$view = views_get_view($view_name);		  
		$view->set_display($display_id);
		$view->set_arguments($args);
	    		
	    //get view output
	    $view->pre_execute();
		$output =  $view->preview($display_id);
		$view->post_execute();
		
		return $output;


		
	} else {	
		//just return default natuzzi italia brand page
		return furnitalia_tweaks_taxonomy_term_page(taxonomy_term_load($brand_tid));
	}
}

function furnitalia_tweaks_taxonomy_term_page($term=NULL) {

	if (arg(0) == 'collections' && $term == NULL) {

		$build = array();
		
		$build['desc'] = array(
			'#markup' => theme('all-cats'), #"All Collections -- Description Page to Go Here",
		);
		
		drupal_add_js(drupal_get_path('theme', 'furnitheme') . "/js/jquery.bgpos.js");
		drupal_add_library('system', 'drupal.ajax');
		
		$build['add'] = array(
			'#markup' => '<div id="menu-pic-wrapper">
					  		<div id="menu-pic" class="menu-hover loading">&nbsp;</div>
					  	</div>',
		);
		
		return $build;
	}

  $vocabulary = taxonomy_vocabulary_load($term->vid);

  $view_name = 'taxonomy_term';
  $display_id='page';
  $args = array($term->tid);

  $view = views_get_view($view_name);		  
  $view->set_arguments($args);

  switch($vocabulary->name) {
    case 'Categories':
      $display_id='page';
      break;
    case 'Brand':
      $display_id='page_brands';
      
      drupal_set_title($term->name);
      
      //$view->init_display($display_id);
      //$view->preview = TRUE;

      break;
    default: 
      // Returns the default term page provided by taxonomy module.
      module_load_include('inc', 'taxonomy', 'taxonomy.pages');
      return taxonomy_term_page($tid);
  }

  $view->set_display($display_id);
  $view->pre_execute();
  $output =  $view->preview($display_id);
  $view->post_execute();

  return $output;

}

/**
 * Implements hook_menu_alter().
 */
function furnitalia_tweaks_menu_alter(&$items) {
	$items['taxonomy/term/%taxonomy_term']['page callback'] = 'furnitalia_tweaks_taxonomy_term_page';
	unset($items['taxonomy/term/%taxonomy_term']['file']);
	
/*
	if (isset($menu['taxonomy/term/%'])) {
      $menu['taxonomy/term/%']['page callback'] = 'furnitalia_tweaks_taxonomy_term_page';
      $menu['taxonomy/term/%']['title'] = t('Furnitalia Collections');
      $menu['taxonomy/term/%']['title callback'] = 'furnitalia_tweaks_get_page_title'; 
      $menu['taxonomy/term/%']['title arguments'] = array(2); 
  }
*/
	
	if(isset($items['user/%user/shortcuts'])) {
		unset($items['user/%user/shortcuts']);
	}
	
	if(isset($items['user/%user/imce'])) {
		unset($items['user/%user/imce']);	
	}
	
}

/**
 * Implements hook_theme().
 */
function furnitalia_tweaks_theme($existing, $type, $theme, $path) {
	
	$path = drupal_get_path('theme', 'furnitheme');
	
	$themes = array (
		'contact' => array(
            'arguments' => array(),
            'template' => 'contact',
            'path' => drupal_get_path('theme', 'furnitheme') . '/templates',
        ),
        'furnitalia_about' => array(
            'arguments' => array(),
            'template' => 'about',
            'path' => drupal_get_path('theme', 'furnitheme') . '/templates',
        ),
        'shipping-deliveries' => array(
            'arguments' => array(),
            'template' => 'shipping-deliveries',
            'path' => drupal_get_path('theme', 'furnitheme') . '/templates',
        ),
        'service-terms' => array(
            'arguments' => array(),
            'template' => 'service-terms',
            'path' => drupal_get_path('theme', 'furnitheme') . '/templates',
        ),
		'privacy-policy' => array(
            'arguments' => array(),
            'template' => 'privacy-policy',
            'path' => drupal_get_path('theme', 'furnitheme') . '/templates',
        ),
        'faq' => array(
            'arguments' => array(),
            'template' => 'faq',
            'path' => drupal_get_path('theme', 'furnitheme') . '/templates',
        ),
		'catalogs' => array(
            'arguments' => array(),
            'template' => 'catalogs',
            'path' => drupal_get_path('theme', 'furnitheme') . '/templates',
        ),
		'interior-design' => array(
            'arguments' => array(),
            'template' => 'interior-design',
            'path' => drupal_get_path('theme', 'furnitheme') . '/templates',
        ),
		'all-cats' => array(
            'arguments' => array(),
            'template' => 'all-cats',
            'path' => drupal_get_path('theme', 'furnitheme') . '/templates',
        ),
		'natuzzi-cat' => array(
            'arguments' => array(),
            'template' => 'natuzzi-cat',
            'path' => drupal_get_path('theme', 'furnitheme') . '/templates',
		),
		'editions-cat' => array(
            'arguments' => array(),
            'template' => 'editions-cat',
            'path' => drupal_get_path('theme', 'furnitheme') . '/templates',
		),
		
        
    );
    return $themes;
}

/**
 * Display about us page.
 */
function furnitalia_tweaks_about() {
	
	$build =  theme('furnitalia_about');

	return $build;
}

/**
 * Construct a drupal_render() style array from an array of loaded nodes.
 *
 * @param $nodes
 *   An array of nodes as returned by node_load_multiple().
 * @param $view_mode
 *   View mode, e.g. 'full', 'teaser'...
 * @param $weight
 *   An integer representing the weight of the first node in the list.
 * @param $langcode
 *   (optional) A language code to use for rendering. Defaults to the global
 *   content language of the current request.
 *
 * @return
 *   An array in the format expected by drupal_render().
 */
function furnitalia_tweaks_node_view_multiple($nodes, $view_mode = 'teaser', $weight = 0, $langcode = NULL) {
  field_attach_prepare_view('node', $nodes, $view_mode, $langcode);
  entity_prepare_view('node', $nodes, $langcode);
  $build = array();
  foreach ($nodes as $node) {
  	$node->index = $weight + 1;
    $build['nodes'][$node->nid] = node_view($node, $view_mode, $langcode);
    $build['nodes'][$node->nid]['#weight'] = $weight;
    $weight++;
  }
  $build['nodes']['#prefix'] = '<div id="gallery-container">';
  $build['nodes']['#suffix'] = '</div>';
  $build['nodes']['#sorted'] = TRUE;
  return $build;
}

/**
 * Implements hook_page_alter().
 */
function furnitalia_tweaks_page_alter(&$page) {
	
	$active_attribute = array('active-menu');
	$editions = 22;
	$italia = 21;

	//wrapper around main navigation menu
	$page['left']['furn_menu'] = array(
		'#prefix' => '<nav id="main-nav" class="accordion">',
		'#suffix' => '</nav>',
	);
	
	//before building menu, mark active items
	$active_cat_tid = "";
	$active_parent_tid = "";
	$active_brand = "";
	$all_coll_active = FALSE;
	
	if (arg(0) == 'natuzzi-italia') {
		$active_brand = $italia;
	} else if (arg(0) == 'natuzzi-editions') {
		$active_brand = $editions;
	}
	
	if (arg(0) == 'taxonomy' && arg(1) == 'term' && is_numeric(arg(2)) && arg(3) == "") { 
		//1. if we are in taxonomy term page, i.e. taxonomy/term/2
		
		$active_cat_tid = arg(2);
		$active_parent_tid = furnitalia_tweaks_get_parent_category($active_cat_tid);
	
	} else if (arg(0) == 'natuzzi-italia' || arg(0) == 'natuzzi-editions') {
		//2. natuzzi-italia/living/sofas, etc..
		//   natuzzi-editions/accessories
		
		$alias = arg(1);
		if (arg(2) != "") {
			$alias .= "/" . arg(2);
		}
		$normal_path = explode('/', drupal_get_normal_path($alias)); //TO-DO check for validity
		if (is_array($normal_path) && count($normal_path) == 3) { //taxonomy/term/xxx
			$active_cat_tid = $normal_path[2];
			$active_parent_tid = furnitalia_tweaks_get_parent_category($active_cat_tid);
		}

	} else if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) != "") {
		//3. if we are in node page, i.e. node/22
		if (isset($vars['content']['system_main']['nodes'])) {	//user this var in order to to load node again
            $node = array_values($vars['content']['system_main']['nodes']);
            $node = $node[0];
            
            if ($node['#bundle'] == 'item') {
           
	            foreach($node['field_category']['#items'] as $term) {
	            	
	            	//get top top and it's parent category
					$active_cat_tid = $term->tid;
					$active_parent_tid = furnitalia_tweaks_get_parent_category($active_cat_tid);
					break;
	            }  
            }
            
        }		
	}

	
	//-------------------------------------	
	// all collections query
	//-------------------------------------	
	$result = db_query("
	  	SELECT DISTINCT td.tid, td.name, h.parent as parent_term, td.weight as delta
		FROM {taxonomy_term_data} td
		INNER JOIN {field_data_field_category} cat on cat.field_category_tid = td.tid
		INNER JOIN {node} n on n.nid=cat.entity_id and n.status=1
		INNER JOIN {taxonomy_term_hierarchy} h on td.tid=h.tid
		WHERE td.vid = :vid 
		ORDER BY td.weight", array(":vid" => 2));

	$all_items = array();
	foreach($result as $term) {
		
		if ($term->parent_term != 0 ) {
			//if it's an item with parent term
			if (!isset($all_items[$term->parent_term])) {
				//parent term not in the list, insert it
				$parent_term = taxonomy_term_load($term->parent_term);
				
				//generate link, mark it as active if it is
				if (empty($active_brand) && $term->parent_term == $active_parent_tid) {
					$link = l($parent_term->name, 'taxonomy/term/' . $term->parent_term, array('attributes' => array('class' => $active_attribute)));
				} else {
					$link = l($parent_term->name, 'taxonomy/term/' . $term->parent_term);		
				}
				
				$all_items[$term->parent_term] = array(
					'tid' => $term->parent_term,
					'link' => $link,
					'delta' => $parent_term->weight,
					'sub' => array(),
					'name' => $parent_term->name,
				);
			}
			
			//generate link, mark it as active if it is			
			if (empty($active_brand) && $term->tid == $active_cat_tid) {
				$all_coll_active = TRUE;
				$link = l($term->name, 'taxonomy/term/' . $term->tid, array('attributes' => array('class' => $active_attribute)));
			} else {
				$link = l($term->name, 'taxonomy/term/' . $term->tid);
			}

			
			//insert term into parent's list
			$all_items[$term->parent_term]['sub'][$term->tid] = array(
				'tid' => $term->tid,
				'link' => $link,
				'delta' => $term->delta,
				'name' => $term->name,
			);
			
		} else {
			//if it is the parent term			
			if (!isset($all_items[$term->tid])) {			
			
				//generate link, mark it as active if it is				
				if (empty($active_brand) && ($term->tid == $active_parent_tid || $term->tid == $active_cat_tid)) {
					$all_coll_active = TRUE;
					$link = l($term->name, 'taxonomy/term/' . $term->tid, array('attributes' => array('class' => $active_attribute)));
				} else {
					$link = l($term->name, 'taxonomy/term/' . $term->tid);		
				}
				
				$all_items[$term->tid] = array(
					'tid' => $term->tid,
					'link' => $link,
					'delta' => $term->weight,
					'name' => $term->name,
					'sub' => array(),
				);
			}
		}		
	}
	
	//-------------------------------------
	// italia/editions collections query  
	//--------------------------------------
	$italia_items = array();
	$editions_items = array();
	
	$result = db_query("
	  SELECT DISTINCT td.tid, td.name, b.field_brand_tid as brand, h.parent as parent_term, td.weight as delta
	  FROM {taxonomy_term_data} td
	  INNER JOIN {field_data_field_category} cat on cat.field_category_tid = td.tid
	  INNER JOIN {node} n on n.nid=cat.entity_id and n.status=1
	  LEFT JOIN {taxonomy_term_hierarchy} h on td.tid=h.tid
	  INNER JOIN {field_data_field_brand} b on b.entity_id=n.nid and b.field_brand_tid IN(:brand1, :brand2)
	  WHERE td.vid = :vid 
	  ORDER BY td.weight", array(":brand1" => $italia, ":brand2" => $editions,":vid" => 2));
	  
	foreach($result as $term) {
		
		if	($term->brand == $italia) {
			//if natuzzi italia brand			
			$temp_items = &$italia_items;
			$path_prefix = "natuzzi-italia/";
		} else {
			//natuzzi editions brand term
			$temp_items = &$editions_items;		
			$path_prefix = "natuzzi-editions/";
		}
		
		if ($term->parent_term != 0 ) {
			//if it's an item with parent term
			if (!isset($temp_items[$term->parent_term])) {
				//parent term not in the list, insert it
				$parent_term = taxonomy_term_load($term->parent_term);
				
				//generate link, mark it as active if it is
				$path = $path_prefix . drupal_get_path_alias('taxonomy/term/' . $term->parent_term);
				if ($active_brand == $term->brand && $term->parent_term == $active_parent_tid) {
					$link = l($parent_term->name, $path, array('attributes' => array('class' => $active_attribute)));
				} else {
					$link = l($parent_term->name, $path);		
				}
				
				$temp_items[$term->parent_term] = array(
					'tid' => $term->parent_term,
					'link' => $link,
					'delta' => $parent_term->weight,
					'name' => $parent_term->name,
					'sub' => array(),
				);
			}
			
			//insert term into parent's list
			
			//generate link, mark it as active if it is
			$path = $path_prefix . drupal_get_path_alias('taxonomy/term/' . $term->tid);
			if ($active_brand == $term->brand && $term->tid == $active_cat_tid) {
				$link = l($term->name, $path, array('attributes' => array('class' => $active_attribute)));
			} else {
				$link = l($term->name, $path);
			}
			$temp_items[$term->parent_term]['sub'][$term->tid] = array(
				'tid' => $term->tid,
				'link' => $link,
				'delta' => $term->delta,
				'name' => $term->name,
			);
			
		} else {
			//if it is the parent term
			if (!isset($temp_items[$term->tid])) {
			
				//generate link, mark it as active if it is			
				$path = $path_prefix . drupal_get_path_alias('taxonomy/term/' . $term->tid);
				if ($active_brand == $term->brand && ($term->tid == $active_cat_tid || $term->tid == $active_parent_tid)) {
					$link = l($term->name, $path, array('attributes' => array('class' => $active_attribute)));
				} else {
					$link = l($term->name, $path);
				}	
				$temp_items[$term->tid] = array(
					'tid' => $term->tid,
					'link' => l($term->name, $path),
					'delta' => $term->weight,
					'name' => $parent_term->name,
					'sub' => array(),
				);
			}
		}
	}
	
	//-------------------------------------
	// build the menus
	//--------------------------------------
	
	$output_all_brands_menu_items = array();
	
	if (arg(0) == 'collections' || (arg(0) == 'taxonomy' && arg(1) == 'term' && is_numeric(arg(2)))) {
		//show subcategories if it is /collections or /taxonomy/term/id page
		_build_subcat_menu_items($all_items, $output_all_brands_menu_items);
	}
	
	// !Menu declarations
	//markup structure for all collections
	$cat_parent_class = "";
	$page['left']['furn_menu']['brands'] = array(		
		'#prefix' => '<h3 class="ui-accordion-header ui-helper-reset ui-state-default ui-corner-all"> ' . l("Brands", 'brands', array('attributes' => array('id' => 'bg0', 'class' => array((drupal_match_path(request_path(), "brand/*\nbrands")) ? " active" : "")))) . '</h3><div class="ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom">',
		'#suffix' => '</div>',		
	);	
	
	//markup structure for all collections
	$page['left']['furn_menu']['all'] = array(
		'#prefix' => '<h3 class="ui-accordion-header ui-helper-reset ui-state-default ui-corner-all">' . l("All Collections", 'collections', array('attributes' => array('id' => 'bg1', 'class' => array($all_coll_active ? " active" : "")))) . '</h3><div class="ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom">',
		'#suffix' => '</div>',
		'#theme' => 'item_list',
		'#items' => array_values($output_all_brands_menu_items),
		'#type' => 'ul',
		'#attributes' => array('class' => 'links'),
	);	
	
	$output_italia_menu_items = array();
	if (arg(0) == 'natuzzi-italia') {
		_build_subcat_menu_items($italia_items, $output_italia_menu_items);
	}

	//mark up structure for natuzzi italia items
	$page['left']['furn_menu']['italia'] = array(
		'#prefix' => '<h3 class="ui-accordion-header ui-helper-reset ui-state-default ui-corner-all">' . l("Natuzzi Italia", 'natuzzi-italia', array('attributes' => array('id' => 'bg2', 'class' => array(($active_brand == $italia) ? " active" : "")))) . '</h3><div class="ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom">',
		'#suffix' => '</div>',
		'#theme' => 'item_list',
		'#items' => array_values($output_italia_menu_items),
		'#type' => 'ul',
		'#attributes' => array('class' => 'links'),
	);
	
	$output_editions_menu_items = array();
	if (arg(0) == 'natuzzi-editions') {
		_build_subcat_menu_items($editions_items, $output_editions_menu_items);
	}

	//mark up structure for natuzzi editions items
	$page['left']['furn_menu']['editions'] = array(
		'#prefix' => '<h3 class="ui-accordion-header ui-helper-reset ui-state-default ui-corner-all">' . l("Natuzzi Editions", 'natuzzi-editions', array('attributes' => array('id' => 'bg3', 'class' => array(($active_brand == $editions) ? " active" : "")))) . '</h3><div class="ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom">',
		'#suffix' => '</div>',
		'#theme' => 'item_list',
		'#items' => array_values($output_editions_menu_items),
		'#type' => 'ul',
		'#attributes' => array('class' => 'links'),
	);
	
	//mark up structure for In Store link
	$page['left']['furn_menu']['in-store'] = array(
		'#prefix' => '<h3 class="ui-accordion-header ui-helper-reset ui-state-default ui-corner-all"> ' . l( "In Store", 'in-store', array('attributes' => array('id' => 'bg5', 'class' => array((arg(0) == 'in-store') ? " active" : "")))) . '</h3><div class="ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom">',
		'#suffix' => '</div>',		
	);
	
	//mark up structure for interior design link
	$page['left']['furn_menu']['interior_design'] = array(
		'#prefix' => '<h3 class="ui-accordion-header ui-helper-reset ui-state-default ui-corner-all"> ' . l( "Interior Design Services", 'interior-design', array('attributes' => array('id' => 'bg4', 'class' => array((arg(0) == 'interior-design') ? " active" : "")))) . '</h3><div class="ui-accordion-content ui-helper-reset ui-widget-content ui-corner-bottom">',
		'#suffix' => '</div>',		
	);

}

/**
* Implements custom array sort comparer
*/
function category_cmp($a, $b) {
	if ($a['delta'] == $b['delta']) {
		return 0;
	} else {
		return $a['delta'] - $b['delta'];
	}
}

/**
 * Builds submenu items for each category menu item
 */
function _build_subcat_menu_items($categories_structure = array(), &$output_menu_items=array()) {
	uasort($categories_structure, 'category_cmp');		//sort categories array by weight
	
	//sort the subcategories, build menu array
	foreach($categories_structure as $item) {
		$subcat = $item['sub'];
		uasort($subcat, 'category_cmp');
		$item['sub'] = $subcat;
		
		//build array of subcategories links
		$subcat = array();
		foreach($item['sub'] as $cat) {
			$subcat [] = $cat['link'];
		}
		
		//array structure for category with subcategories
		$temp_submenu_items = array(
			'#prefix' => '<div class="accordion-inner"><h4>' . $item['link'] . '</h4><div>',
			'#theme' => 'item_list',
			'#items' => array_values($subcat),
			'#suffix' => '</div></div>',
			'#type' => 'ul',
			'#attributes' => array('class' => 'links'),

		);
		$output_menu_items []= drupal_render($temp_submenu_items);
	}
}


/**
  * Implements hook_node_presave()
  *
  */
//!NodePresave
function furnitalia_tweaks_node_presave($node) {

	if ($node->type == 'item') {	
				
		if (count($node->field_special_price['und']) > 0) {
			$special_price = $node->field_special_price['und'][0]['value'];
			if (intval($special_price) == 0) {
				$node->field_special_price['und'][0]['value'] = $node->sell_price; //set default
			}
		} else {
			$node->field_special_price['und'][] = array('value' => $node->sell_price); //set default
		}

				
		/*//on each item save, go through selected categories
		//and automatically assign parent categories to item
		
		$parent_cats = array();
		$cats_to_add = array();
		$field_category = $node->field_category;
		
		foreach($node->field_category['und'] as $cat) {
			$parents = taxonomy_get_parents($cat['tid']);
			
			foreach($parents as $parent_term) {				
				$parent_cats []= $parent_term->tid;
			}
		}
		
		$parent_cats = array_unique($parent_cats);
		
		foreach($parent_cats as $cat) {
			$cats_to_add []= array('tid' => $cat);
		}
		
		$field_category['und'] = array_merge($field_category['und'], $cats_to_add);
		$node->field_category = $field_category;*/
		
	}
	return $node;
}

/*function furnitalia_tweaks_is_link_active($tid, $vars, $query = NULL, $ignore_query=false) {
	if ( arg(0) == 'taxonomy' && arg(1) == 'term') {
		if (is_numeric(arg(2)) && (arg(2) == $tid || furnitalia_tweaks_is_child(arg(2), $tid))) {
			if (is_array($query) && isset($query['brand'])) {
				if (isset($_GET['brand'])) {
					return $query['brand'] == $_GET['brand'];
				}
				
				return false;
				
			} else {
				
				if ($ignore_query) { 
					return true; 
				}
				
				if (isset($_GET['brand'])) {
					return false;
				} else {
					return true;
				}
			}
		}
	} else {
        if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) != 'edit') {

        	if (isset($vars['content']['system_main']['nodes'])) {
	            $node = array_values($vars['content']['system_main']['nodes']);
	            $node = $node[0];
	            
	            if ($node['#bundle'] == 'item') {
	           
		            foreach($node['field_category']['#items'] as $term) {
		            	
		            	if (isset($query) && $query['brand'] == $node['field_brand']['#items'][0]['tid']) {
			            	if ($term['tid'] == $tid || furnitalia_tweaks_is_child($term['tid'], $tid)) {
				            	return true;
			            	}
		            	}
		            }  
	            } 
            }
        }   
    }   
	
	return FALSE;
	
}*/

/*function furnitalia_tweaks_is_child($first_tid, $second_tid) {
	$parents = taxonomy_get_parents($first_tid);
	
	foreach($parents as $parent_term) {
		if ($parent_term->tid == $second_tid) {
			return true;
		}
	}
	
	return false;
}*/

function furnitalia_tweaks_get_parent_category($tid="") {
	
	$parents = taxonomy_get_parents($tid);
	$parents = array_values($parents);
	
	if (empty($parents)) {
		return $tid;
	} else {
		return $parents[0]->tid;
	}
		

}

function furnitalia_tweaks_form_alter(&$form, &$form_state, $form_id){
	if ($form['#id'] == 'item-node-form') {
		
		//dsm($form);
		drupal_add_css(drupal_get_path('theme', 'furnitheme') . '/css/leads.css');

		//place video field in tabs
	    $form['item_video_container'] = array(
	        '#type' => 'fieldset',
	        '#title' => t('Item Video'),
	        '#collapsible' => TRUE,
	        '#collapsed' => FALSE,
	        '#group' => 'additional_settings',
	        '#weight' => -2, //Tab location
	    );

	    $form['field_video']['#container'] = array('field_video');	//make sure parent item doesn't change after moving form element
	    $form['item_video_container']['field_video'] = $form['field_video'];
	    unset($form['field_video']);
	    
	    
	    $form['buttons']['#weight'] = 100;
	    
	    //put field ALU in product info
	    $form['base']['field_alu'] = $form['field_alu'];
		$form['base']['field_alu']['#weight'] = 1;
		
		//put checkbox 'show add-to-cart button
		//$form['base']['show_add_to_cart'] = $form['field_show_add_to_cart'];
		//$form['base']['show_add_to_cart']['und']['#title'] = "Show 'Add to Cart' button?";
		//$form['base']['show_add_to_cart']['#weight'] = 2;
		
		//put sale price in product info
		$form['field_sale_price']['und'][0]['value']['#attributes'] = array('size'=> array("15"));
		$form['base']['prices']['field_sale_price'] = $form['field_sale_price'];
		$form['base']['prices']['list_price']['#title'] = "MSRP";
		$form['base']['prices']['sell_price']['#title'] = "Furnitalia";
		
		//unset old values
		$form['base']['prices']['cost']['#access'] = FALSE;
		$form['base']['pkg_qty']['#access'] = FALSE;
		$form['base']['ordering']['#access'] = FALSE;		
	    $form['field_sale_price']['#access'] = FALSE;
		$form['field_alu']['#access'] = FALSE;
		$form['revision_information']['#access'] = FALSE;
		$form['author']['#access'] = FALSE;
		//unset($form['field_show_add_to_cart']);
		
		//restrict title to be less than or equal to 20 characters
		$form['title']['#maxlength'] = '25';
		
		$form['#validate'][] = 'furnitalia_tweaks_item_node_form_validate';


    }
}

/**
* Custom validation of node form elements
*/
function furnitalia_tweaks_item_node_form_validate(&$form, &$form_state) {

	//validate sale price for being a number or empty value
	$sale_price = $form_state['values']['field_sale_price']['und'][0]['value'];
	if (!empty($sale_price)) {
		
		if (!is_numeric($sale_price) || floatval($sale_price) === 0.0)  {
			form_set_error('field_sale_price', 'Sale price must be numeric or empty!');			
			return false;
		}
	}

}

/**
 * Implements hook_node_load()
 */
function furnitalia_tweaks_node_load($nodes, $types) {
	$sqid = 1; //clearance queue
	
	// Decide whether any of $types are relevant to our purposes.
	if (count(array_intersect(array('item'), $types))) {
	
		//gather list of nodes on clearance
		$res = db_query("SELECT GROUP_CONCAT(CAST(nid AS CHAR) SEPARATOR ',') FROM {nodequeue_nodes} q WHERE q.sqid = :sqid", array(':sqid' => $sqid));
		$clearance_list = explode(',', $res->fetchField());
				
		foreach($nodes as $node) {
			if (in_array($node->nid, $clearance_list)) {
				$nodes[$node->nid]->clearance = TRUE;
			}
		}

	}
	
}

/**
 * Display the list of items that are in current user's favorites list
 */
function furnitalia_tweaks_favorites_list() {
	global $user;
	
	if ($user->uid == 0) {
		//not authenticated user
		drupal_set_message('Please log in to access your favorites list');
		drupal_goto('user/login');
		return;
	}
	
	$favorites = flag_get_user_flags('node', NULL, $user->uid);
	
	if(!isset($favorites['favorites']) || empty($favorites['favorites'])) {
		return "Your don't have any favorites yet. <br/> You can add items to favorites by clicking on 'Add to favorites' button when viewing product descriptions.";
	}
	
	$nids = array();
	
	foreach($favorites['favorites'] as $nid => $flag_obj) {
		$nids []= $nid;
	}
	
	$nodes = node_load_multiple($nids);    
    $build = furnitalia_tweaks_prepare_node_attributes($nodes);
    
    unset($build['options']);

	
	//print flag_create_link('favorites', $node->nid); 
	
	return $build;
}

/**
 * Display current user's orders
 */
function furnitalia_tweaks_orders() {
	global $user;
	$dest = drupal_get_destination();
	
	if ($user->uid == 0) {
		//not authenticated user
		drupal_set_message('Please log in to view your orders');
		drupal_goto('user/login', $dest);
	} else {
		drupal_goto('user/' . $user->uid . '/orders', $dest);
	}
}


/**
  * Display contact form in pop-up dialog box.
 */
function furnitalia_tweaks_contact_js($item, $nid=NULL){

	if (!is_numeric($nid)) {
		$nid = 32; //contact us node id
	}

	$output = "";
	$node = node_load($nid);

	if ($nid == 34) { //request form
	
		#for request form, prepopulate item's name
		$node->webform['components'][5]['value'] = $item->title;
		$node->webform['components'][7]['value'] = $item->nid;
	}

	$output .= theme('node', node_view($node));
	
	ajax_deliver(array('#type' => 'ajax', '#commands' => array (
		array(
			'command' => 'openPopup', 
			'data' => $output,
			'method' => 'html',
		    'selector' => "#dialog-form",
		    'settings' => NULL,
		),
	)));
    
}

function  furnitalia_tweaks_prepare_node_attributes($nodes) {
	
	if (!is_array($nodes)) {
		return array();
	}
	
	$build = array();

    $build += furnitalia_tweaks_node_view_multiple($nodes);

	return $build;
	
}

function furnitalia_tweaks_webform_submission_presave($node, &$submission) {	
	
	$time_format = 'm-d-Y H:i';
	$lead_info = array();
	if ($node->nid == 32) {
		
		$lead_info['first_name'] = $submission->data[1]['value'][0];
		$lead_info['last_name'] = $submission->data[2]['value'][0];		
		$lead_info['email'] = $submission->data[3]['value'][0];
		$lead_info['zip'] = $submission->data[5]['value'][0];
		$lead_info['body'] = $submission->data[4]['value'][0];
		$lead_info['phone'] = "";
		
	} else if ($node->nid == 34) {
		$lead_info['first_name'] = $submission->data[1]['value'][0];
		$lead_info['last_name'] = $submission->data[2]['value'][0];		
		$lead_info['email'] = $submission->data[3]['value'][0];
		$lead_info['phone'] = $submission->data[4]['value'][0];
		$lead_info['body'] = $submission->data[5]['value'][0] . "\n";		
		$lead_info['body'] .= $submission->data[6]['value'][0] . "\n";
		$lead_info['body'] .= $submission->data[7]['value'][0];
		$lead_info['zip'] = $submission->data[8]['value'][0];
	}
	
	//defaults
	$lead_info['created'] = REQUEST_TIME;
	$lead_info['updated'] = 0;
	$lead_info['updated_by'] = 0;
	$lead_info['status'] = 'N';
	$lead_info['status_comments'] = "";
	$lead_info['address'] = "";
	$lead_info['type'] = "";
	$lead_info['uid'] = 0;
	$lead_info['log'] = 'Created: ' . format_date(REQUEST_TIME, 'custom', $time_format);
	
	$lid = furnileads_insert_lead($lead_info);
	
	if (is_numeric($lid)) {
		watchdog('furnitalia', 'Lead record created for %first %last, with ID:%id', array('%first' => $lead_info['first_name'], '%last' => $lead_info['last_name'], '%id' => $lid), WATCHDOG_INFO, $link = NULL);	
	} else {
		watchdog('furnitalia', 'Failed to create lead record created for %first %last', array('%first' => $lead_info['first_name'], '%last' => $lead_info['last_name']), WATCHDOG_ERROR, $link = NULL);	
	}
}

/**
  * Displays front page content for Furntialia website
 */
function furnitalia_tweaks_front_page() {
	drupal_add_js(drupal_get_path('theme', 'furnitheme') . "/js/jquery.bgpos.js");
	drupal_add_library('system', 'drupal.ajax');
	
	//$sofas_term = taxonomy_term_load(2);
	
	$build = array();
	
	//$build += furnitalia_tweaks_taxonomy_term_page($sofas_term);

	$build['category-preview'] = array(
		'#markup' => '<div id="cat-preview">
						<h2>Featured:</h2>			
						<div id="category-image-pane">
							<ul class="cat-slider category1 cat-preview" style="display:block">
					  			<li><a href="#" class="category-image"><img src="' .drupal_get_path('theme', 'furnitheme') . "/images/cat-images/all/gilda_lounge.png" . '" title="Furnitalia collections"  /></a></li>
					  		</ul>
					  	</div>
 				  	 </div>',
	);
	
	
	$build['front-anim'] = array (
		'#markup' => '<div id="front-overlay">
						<div id="front-left">&nbsp;</div>
						<div id="front-right">&nbsp;</div>						
						<div id="menu-pic-wrapper">
					  		<div id="menu-pic" class="menu-hover loading">&nbsp;</div>
					  	</div>
					  	<a href="#" id="enterFurnitalia">ENTER FURNITALIA</a>
 				  	 </div>',
	);
	
	drupal_set_title("Modern Furniture Store Sacramento/Roseville");
	
	return $build;
}

/**
  * AJAX callback for products (gallery) page
 */
function furnitalia_tweaks_products_ajax () {
	
	ajax_deliver(array('#type' => 'ajax', '#commands' => array(
		array(
			'command' => 'openPopup', 
			'data' => $output,
			'method' => 'html',
		    'selector' => "#dialog-form",
		    'settings' => NULL,
		),
		//ajax_command_replace('#pagination', $output), 
	)));
}

/**
 * Alters the price with temporary sale price
 */
function furnitalia_tweaks_uc_product_alter(&$node) {
	if (variable_get('show_sale_prices', FALSE)) {
		if (isset($node->field_special_price['und'][0]['value'])) {
			$special_price = $node->field_special_price['und'][0]['value'];
			
			$diff = abs(floatval($special_price) - floatval($node->price));
		 	if ($diff > 0.01) {
			 	//sell price and special price are not same
			 	$node->price = $special_price;
			}
		}
	}
}


/**
 * Implementation of hook_views_query_alter
 * @param type $view
 * @param type $query 
 */
/*function mymodule_views_query_alter(&$view, &$query) {
	if ($view->name == 'VIEWNAME') {
	}
}*/
