<?php
// $Id$

/**
 * @file
 * A module implementing tweaks and misc Drupal API hooks.
 *
 */

/**
* Implements hook_menu()
*/
function furnitalia_tweaks_menu() {
	$items['contact/ajax'] = array (
		'page callback' => 'furnitalia_tweaks_contact_js',
		'access callback' => TRUE, 
		'type' => MENU_CALLBACK,
	);
	$items['request/%node/ajax'] = array (
		'page callback' => 'furnitalia_tweaks_contact_js',
		'page arguments' => array(1, '34'),
		'access callback' => TRUE, 
		'type' => MENU_CALLBACK,
	);
	$items['interior-design'] = array(
		'title' => 'Interior Design Services',
	    'page callback' => 'theme',
	    'page arguments' => array('interior-design'),
	    'access callback' => TRUE,
	    'type' => MENU_NORMAL_ITEM,
    );

	$items['my-favorites'] = array(
		'title' => 'My Favorites',
	    'page callback' => 'furnitalia_tweaks_favorites_list',
	    'access callback' => TRUE,
	    'type' => MENU_NORMAL_ITEM,
    );
    $items['my-orders'] = array(
		'title' => 'My Orders',
	    'page callback' => 'furnitalia_tweaks_orders',
	    'access callback' => TRUE,
	    'type' => MENU_NORMAL_ITEM,
    );
    $items['front'] = array (
		'page callback' => 'furnitalia_tweaks_front_page',
		'access callback' => TRUE, 
		'type' => MENU_CALLBACK,
	);
	$items['products/ajax'] = array (
		'page callback' => 'furnitalia_tweaks_products_ajax',
		'access callback' => TRUE, 
		'type' => MENU_CALLBACK,
	);
	$items['about'] = array(
		'title' => 'About Furnitalia',
	    'page callback' => 'furnitalia_tweaks_about',
	    'access callback' => TRUE,
	    'type' => MENU_NORMAL_ITEM,
    );
    $items['shipping-deliveries'] = array(
		'title' => 'Shipping and Deliveries',
	    'page callback' => 'theme',
	    'page arguments' => array('shipping-deliveries'),
	    'access callback' => TRUE,
	    'type' => MENU_NORMAL_ITEM,
    );
    $items['service-terms'] = array(
		'title' => 'Terms of Service',
	    'page callback' => 'theme',
	    'page arguments' => array('service-terms'),
	    'access callback' => TRUE,
	    'type' => MENU_NORMAL_ITEM,
    );
    $items['privacy-policy'] = array(
		'title' => 'Privacy Policy',
	    'page callback' => 'theme',
	    'page arguments' => array('privacy-policy'),
	    'access callback' => TRUE,
	    'type' => MENU_NORMAL_ITEM,
    );
    $items['faq'] = array(
		'title' => 'Frequently Asked Questions',
	    'page callback' => 'theme',
	    'page arguments' => array('faq'),
	    'access callback' => TRUE,
	    'type' => MENU_NORMAL_ITEM,
    );
	$items['catalogs'] = array(
		'title' => 'Catalogs',
	    'page callback' => 'theme',
	    'page arguments' => array('catalogs'),
	    'access callback' => TRUE,
	    'type' => MENU_NORMAL_ITEM,
    );
    $items['contact'] = array(
		'title' => 'Contact Us',
	    'page callback' => 'theme',
	    'page arguments' => array('contact'),
	    'access callback' => TRUE,
	    'type' => MENU_NORMAL_ITEM,
    );
	
	return $items;
}

/**
 * Implements hook_menu_alter().
 */
function furnitalia_tweaks_menu_alter(&$items) {
	$items['taxonomy/term/%taxonomy_term']['page callback'] = 'furnitalia_tweaks_taxonomy_term_page';
	unset($items['taxonomy/term/%taxonomy_term']['file']);
	
	if(isset($items['user/%user/shortcuts'])) {
		unset($items['user/%user/shortcuts']);
	}
	
	if(isset($items['user/%user/imce'])) {
		unset($items['user/%user/imce']);	
	}
	
}

/**
 * Implements hook_theme().
 */
function furnitalia_tweaks_theme($existing, $type, $theme, $path) {
	
	$path = drupal_get_path('theme', 'furnitheme');
	
	$themes = array (
		'contact' => array(
            'arguments' => array(),
            'template' => 'contact',
            'path' => drupal_get_path('theme', 'furnitheme') . '/templates',
        ),
        'furnitalia_about' => array(
            'arguments' => array(),
            'template' => 'about',
            'path' => drupal_get_path('theme', 'furnitheme') . '/templates',
        ),
        'shipping-deliveries' => array(
            'arguments' => array(),
            'template' => 'shipping-deliveries',
            'path' => drupal_get_path('theme', 'furnitheme') . '/templates',
        ),
        'service-terms' => array(
            'arguments' => array(),
            'template' => 'service-terms',
            'path' => drupal_get_path('theme', 'furnitheme') . '/templates',
        ),
		'privacy-policy' => array(
            'arguments' => array(),
            'template' => 'privacy-policy',
            'path' => drupal_get_path('theme', 'furnitheme') . '/templates',
        ),
        'faq' => array(
            'arguments' => array(),
            'template' => 'faq',
            'path' => drupal_get_path('theme', 'furnitheme') . '/templates',
        ),
		'catalogs' => array(
            'arguments' => array(),
            'template' => 'catalogs',
            'path' => drupal_get_path('theme', 'furnitheme') . '/templates',
        ),
		'interior-design' => array(
            'arguments' => array(),
            'template' => 'interior-design',
            'path' => drupal_get_path('theme', 'furnitheme') . '/templates',
        ),
        
    );
    return $themes;
}

/**
 * Display about us page.
 */
function furnitalia_tweaks_about() {
	
	$build =  theme('furnitalia_about');

	return $build;
}


/**
 * Menu callback; displays all nodes associated with a term.
 *
 * @param $term
 *   The taxonomy term.
 * @return
 *   The page content.
 */
function furnitalia_tweaks_taxonomy_term_page($term) {
  // If there is a menu link to this term, the link becomes the last part of
  // the active trail, and the link name becomes the page title. Thus, we must
  // explicitly set the page title to be the term title.  
  drupal_set_title($term->name);

  // Build breadcrumb based on the hierarchy of the term.
  $current = (object) array(
    'tid' => $term->tid,
  );  

  // Set the term path as the canonical URL to prevent duplicate content.
  $uri = entity_uri('taxonomy_term', $term);
  drupal_add_html_head_link(array('rel' => 'canonical', 'href' => url($uri['path'], $uri['options'])), TRUE);
  // Set the non-aliased path as a default shortlink.
  drupal_add_html_head_link(array('rel' => 'shortlink', 'href' => url($uri['path'], array_merge($uri['options'], array('alias' => TRUE)))), TRUE);

  // Normally we would call taxonomy_term_show() here, but for backwards
  // compatibility in Drupal 7 we do not want to do that (it produces different
  // data structures and HTML markup than what Drupal 7 released with). Calling
  // taxonomy_term_view() directly provides essentially the same thing, but
  // allows us to wrap the rendered term in our desired array structure.
  $build['term_heading'] = array(
    '#prefix' => '<div class="term-listing-heading">',
    '#suffix' => '</div>',
    'term' => taxonomy_term_view($term, 'full'),
  );

  if ($nids = taxonomy_select_nodes($term->tid, TRUE, variable_get('default_nodes_main', 10))) {
    $nodes = node_load_multiple($nids);
    //dsm($nodes);
    
    $build += furnitalia_tweaks_prepare_node_attributes($nodes);
    
  }
  else {
    $build['no_content'] = array(
      '#prefix' => '<p>',
      '#markup' => t('There is currently no content classified with this term.'),
      '#suffix' => '</p>',
    );
  }
  return $build;
}

/**
 * Construct a drupal_render() style array from an array of loaded nodes.
 *
 * @param $nodes
 *   An array of nodes as returned by node_load_multiple().
 * @param $view_mode
 *   View mode, e.g. 'full', 'teaser'...
 * @param $weight
 *   An integer representing the weight of the first node in the list.
 * @param $langcode
 *   (optional) A language code to use for rendering. Defaults to the global
 *   content language of the current request.
 *
 * @return
 *   An array in the format expected by drupal_render().
 */
function furnitalia_tweaks_node_view_multiple($nodes, $view_mode = 'teaser', $weight = 0, $langcode = NULL) {
  field_attach_prepare_view('node', $nodes, $view_mode, $langcode);
  entity_prepare_view('node', $nodes, $langcode);
  $build = array();
  foreach ($nodes as $node) {
  	$node->index = $weight + 1;
    $build['nodes'][$node->nid] = node_view($node, $view_mode, $langcode);
    $build['nodes'][$node->nid]['#weight'] = $weight;
    $weight++;
  }
  $build['nodes']['#prefix'] = '<div id="gallery-container">';
  $build['nodes']['#suffix'] = '</div>';
  $build['nodes']['#sorted'] = TRUE;
  return $build;
}

/**
 * Implements hook_page_alter().
 */
function furnitalia_tweaks_page_alter(&$page) {
	
	$active_attribute = array('class' => array('active-menu'));
	$editions = 22;
	$italia = 21;

	//wrapper around main navigation menu
	$page['left']['furn_menu'] = array(
		'#prefix' => '<nav id="main-nav">',
		'#suffix' => '</nav>',
	);
	
	//-------------------------------------	
	// all collections query
	//-------------------------------------	
	$result = db_query("
	  SELECT DISTINCT td.tid, td.name, h.parent as parent_term FROM {taxonomy_term_data} td
	  INNER JOIN {field_data_field_category} cat on cat.field_category_tid = td.tid
	  INNER JOIN {node} n on n.nid=cat.entity_id and n.status=1
	  INNER JOIN {taxonomy_term_hierarchy} h on td.tid=h.tid
	  WHERE td.vid = :vid", array(":vid" => 2));

	$items = array();
	foreach($result as $term) {
	
		$attributes = array();
		
		if ($term->parent_term != 0 ) {//&& !isset($items[$term->parent_term])) {
			//this term has a parent term, so take it's parent instead
			
			if (furnitalia_tweaks_is_link_active($term->parent_term, $page)) {
				$attributes = $active_attribute;
			}
			
			$parent_term = taxonomy_term_load($term->parent_term);
			$items[$term->parent_term] = l($parent_term->name, 'taxonomy/term/' . $term->parent_term, array('attributes' => $attributes));
			
		} else if($term->parent_term == 0) {//} && !isset($items[$term->tid])) {
			//this is already parent term
		
			if (furnitalia_tweaks_is_link_active($term->tid, $page)) {
				$attributes = $active_attribute;
			}

			$items[$term->tid] = l($term->name, 'taxonomy/term/' . $term->tid, array('attributes' => $attributes));
		}
		
	}

	//markup structure for all collections
	$page['left']['furn_menu']['all'] = array(
		'#prefix' => '<h3><a id="bg1" href="#">All Collections</a></h3><div>',
		'#suffix' => '</div>',
		'#theme' => 'item_list',
		'#items' => $items,
		'#type' => 'ul',
		'#attributes' => array('class' => 'links'),
	);
	
	
	//-------------------------------------
	// italia/editions collections query  
	//--------------------------------------
	$italia_items = array();
	$editions_items = array();
	$italia_query_string = array('brand' => $italia);
	$editions_query_string = array('brand' => $editions);
	
	$result = db_query("
	  SELECT DISTINCT td.tid, td.name, b.field_brand_tid as brand, h.parent as parent_term FROM {taxonomy_term_data} td
	  INNER JOIN {field_data_field_category} cat on cat.field_category_tid = td.tid
	  INNER JOIN {node} n on n.nid=cat.entity_id and n.status=1
	  LEFT JOIN {taxonomy_term_hierarchy} h on td.tid=h.tid
	  INNER JOIN {field_data_field_brand} b on b.entity_id=n.nid and b.field_brand_tid IN(:brand1, :brand2)
	  WHERE td.vid = :vid", array(":brand1" => $italia, ":brand2" => $editions,":vid" => 2));
	  
	foreach($result as $term) {
		$attributes = array();
		
		if	($term->brand == $italia) {
			//if natuzzi italia brand
			
			if ($term->parent_term != 0 && !isset($italia_items[$term->parent_term])) {
				//if term has parent term, then take it's parent
				
				if (furnitalia_tweaks_is_link_active($term->parent_term, $page, $italia_query_string)) {
					$attributes = $active_attribute;
				}
			
				$parent_term = taxonomy_term_load($term->parent_term);
				$italia_items[$term->parent_term] = l($parent_term->name, 'taxonomy/term/' . $term->parent_term, array('query' => $italia_query_string, 'attributes' => $attributes));
				
			} else if($term->parent_term == 0 && !isset($italia_items[$term->tid])) {
				
				if (furnitalia_tweaks_is_link_active($term->tid, $page, $italia_query_string)) {
					$attributes = $active_attribute;
				}
				
				$italia_items[$term->tid] = l($term->name, 'taxonomy/term/' . $term->tid, array('query' => $italia_query_string, 'attributes' => $attributes));				
			}
			
		} else {
			//natuzzi editions brand term
					
			if ($term->parent_term != 0 && !isset($editions_items[$term->parent_term])) {
				//term has parent term, so take parent
				
				if (furnitalia_tweaks_is_link_active($term->parent_term, $page, $editions_query_string)) {
					$attributes = $active_attribute;
				}
				
				$parent_term = taxonomy_term_load($term->parent_term);
				$editions_items[$term->parent_term] = l($parent_term->name, 'taxonomy/term/' . $term->parent_term, array('query' => $editions_query_string, 'attributes' => $attributes));
				
			} else if($term->parent_term == 0 && !isset($editions_items[$term->tid])) {
				//it is parent term
				
				if (furnitalia_tweaks_is_link_active($term->tid, $page, $editions_query_string)) {
					$attributes = $active_attribute;
				}
				
				$editions_items[$term->tid] = l($term->name, 'taxonomy/term/' . $term->tid, array('query' => $editions_query_string, 'attributes' => $attributes));				
				
			}
		}
	}

	//mark up structure for natuzzi italia items
	$page['left']['furn_menu']['italia'] = array(
		'#prefix' => '<h3><a id="bg2" href="#">Natuzzi Italia</a></h3><div>',
		'#suffix' => '</div>',
		'#theme' => 'item_list',
		'#items' => array_values($italia_items),
		'#type' => 'ul',
		'#attributes' => array('class' => 'links'),
	);
	
	//mark up structure for natuzzi editions items
	$page['left']['furn_menu']['editions'] = array(
		'#prefix' => '<h3><a id="bg3" href="#">Natuzzi Editions</a></h3><div>',
		'#suffix' => '</div>',
		'#theme' => 'item_list',
		'#items' => array_values($editions_items),
		'#type' => 'ul',
		'#attributes' => array('class' => 'links'),
	);
	
	//mark up structure for interior design link
	$page['left']['furn_menu']['interior_design'] = array(
		'#prefix' => '<h3><a id="bg4" href="/interior-design">Furnitalia Interior Design</a></h3>',
	);

	//if it is gallery page, retrieve top menu items
	if (arg(0) == 'taxonomy' && arg(1) == 'term' && is_numeric(arg(2))) {
		
		$parent_category = furnitalia_tweaks_get_parent_category();
		$selected_brand = furnitalia_tweaks_get_selected_brand();
		$params = array(":parent_cat" => $parent_category, ":vid" => 2);
		$brand_join = '';
		
		if (!empty($selected_brand)) {
			$params[':brand'] = $selected_brand;
			$brand_join = " INNER JOIN {field_data_field_brand} b on b.entity_id=n.nid and b.field_brand_tid=:brand ";
		}
	
		$result = db_query("
		  SELECT DISTINCT td.tid, td.name FROM {taxonomy_term_data} td
		  INNER JOIN {taxonomy_term_hierarchy} h on td.tid=h.tid and h.parent=:parent_cat
		  INNER JOIN {field_data_field_category} cat on cat.field_category_tid = h.tid
		  INNER JOIN {node} n on n.nid=cat.entity_id and n.status=1 " . $brand_join . " 
		  WHERE td.vid = :vid", $params);
	
		$items = array();
		foreach($result as $term) {
			
			$attributes = array();
			
			if (furnitalia_tweaks_is_link_active($term->tid, $page, null, TRUE)) {
					$attributes = $active_attribute;
			}
			
			if (!empty($selected_brand)) {
				$items[] = l($term->name, 'taxonomy/term/' . $term->tid, array('attributes' => $attributes, 'query' => array('brand' => $selected_brand)));
			} else {
				$items[] = l($term->name, 'taxonomy/term/' . $term->tid, array('attributes' => $attributes));
			}
		}
	
		$page['content_top']['furn_top_menu'] = array(
			'#theme' => 'item_list',
			'#items' => $items,
			'#type' => 'ul',
			'#attributes' => array('class' => 'links inline'),
		);
	}

}

function furnitalia_tweaks_is_link_active($tid, $vars, $query = NULL, $ignore_query=false) {
	if ( arg(0) == 'taxonomy' && arg(1) == 'term') {
		if (is_numeric(arg(2)) && (arg(2) == $tid || furnitalia_tweaks_is_child(arg(2), $tid))) {
			if (is_array($query) && isset($query['brand'])) {
				if (isset($_GET['brand'])) {
					return $query['brand'] == $_GET['brand'];
				}
				
				return false;
				
			} else {
				
				if ($ignore_query) { 
					return true; 
				}
				
				if (isset($_GET['brand'])) {
					return false;
				} else {
					return true;
				}
			}
		}
	} else {
        if (arg(0) == 'node' && is_numeric(arg(1)) && arg(2) != 'edit') {

        	if (isset($vars['content']['system_main']['nodes'])) {
	            $node = array_values($vars['content']['system_main']['nodes']);
	            $node = $node[0];
	            
	            if ($node['#bundle'] == 'item') {
	           
		            foreach($node['field_category']['#items'] as $term) {
		            	
		            	if (isset($query) && $query['brand'] == $node['field_brand']['#items'][0]['tid']) {
			            	if ($term['tid'] == $tid || furnitalia_tweaks_is_child($term['tid'], $tid)) {
				            	return true;
			            	}
		            	}
		            }  
	            } 
            }
        }   
    }   
	
	return FALSE;
	
}

function furnitalia_tweaks_is_child($first_tid, $second_tid) {
	$parents = taxonomy_get_parents($first_tid);
	
	foreach($parents as $parent_term) {
		if ($parent_term->tid == $second_tid) {
			return true;
		}
	}
	
	return false;
}

function furnitalia_tweaks_get_parent_category() {
	if (arg(0) == 'taxonomy' && arg(1) == 'term' && is_numeric(arg(2))) {
		$parents = taxonomy_get_parents(arg(2));
		$parents = array_values($parents);
		
		if (empty($parents)) {
			return arg(2);
		} else {
			return $parents[0]->tid;
		}
		
	} else {
		return 1;
	}
}

function furnitalia_tweaks_get_selected_brand() {
	if (isset($_GET['brand']) && is_numeric($_GET['brand'])) {
		return $_GET['brand'];
	}
}

function furnitalia_tweaks_form_alter(&$form, &$form_state, $form_id){
	if ($form['#id'] == 'item-node-form') {
		dsm($form);
		
		//place video field in tabs
	    $form['item_video'] = array(
	        '#type' => 'fieldset',
	        '#title' => t('Item Video'),
	        '#collapsible' => TRUE,
	        '#collapsed' => FALSE,
	        '#group' => 'additional_settings',
	        '#weight' => -2, //Tab location
	    );
	    $form['item_video']['und'][0] = $form['field_video'];
	    unset($form['field_video']);
	    
	    $form['buttons']['#weight'] = 100;
	    
	    //put field ALU in product info
	    $form['base']['field_alu'] = $form['field_alu'];
		$form['base']['field_alu']['#weight'] = 1;
		
		//put checkbox 'show add-to-cart button
		//$form['base']['show_add_to_cart'] = $form['field_show_add_to_cart'];
		//$form['base']['show_add_to_cart']['und']['#title'] = "Show 'Add to Cart' button?";
		//$form['base']['show_add_to_cart']['#weight'] = 2;
		
		//put sale price in product info
		$form['field_sale_price']['und'][0]['value']['#attributes'] = array('size'=> array("15"));
		$form['base']['prices']['field_sale_price'] = $form['field_sale_price'];
		$form['base']['prices']['list_price']['#title'] = "MSRP";
		$form['base']['prices']['sell_price']['#title'] = "Furnitalia";
		
		//unset old values
		unset($form['base']['prices']['cost']);
		unset($form['base']['pkg_qty']);
		unset($form['base']['ordering']);		
	    unset($form['field_sale_price']);
		unset($form['field_alu']);
		unset($form['revision_information']);
		unset($form['author']);		
		//unset($form['field_show_add_to_cart']);

    }
}

/**
 * Display the list of items that are in current user's favorites list
 */
function furnitalia_tweaks_favorites_list() {
	global $user;
	
	if ($user->uid == 0) {
		//not authenticated user
		drupal_set_message('Please log in to access your favorites list');
		drupal_goto('user/login');
		return;
	}
	
	$favorites = flag_get_user_flags('node', NULL, $user->uid);
	
	if(!isset($favorites['favorites']) || empty($favorites['favorites'])) {
		return "Your favorites list is empty. You can add items to favorites by clicking on 'Add to favorites' button on item info page";
	}
	
	$nids = array();
	
	foreach($favorites['favorites'] as $nid => $flag_obj) {
		$nids []= $nid;
	}
	
	$nodes = node_load_multiple($nids);    
    $build = furnitalia_tweaks_prepare_node_attributes($nodes);
    
    unset($build['options']);

	
	//print flag_create_link('favorites', $node->nid); 
	
	return $build;
}

/**
 * Display current user's orders
 */
function furnitalia_tweaks_orders() {
	global $user;
	$dest = drupal_get_destination();
	
	if ($user->uid == 0) {
		//not authenticated user
		drupal_set_message('Please log in to view your orders');
		drupal_goto('user/login', $dest);
	} else {
		drupal_goto('user/' . $user->uid . '/orders', $dest);
	}
}


/**
  * Display contact form in pop-up dialog box.
 */
function furnitalia_tweaks_contact_js($item, $nid=NULL){

	if (!is_numeric($nid)) {
		$nid = 32; //contact us node id
	}

	$output = "";
	$node = node_load($nid);

	if ($nid == 34) { //request form
	
		#for request form, prepopulate item's name
		$node->webform['components'][5]['value'] = $item->title;
		$node->webform['components'][7]['value'] = $item->nid;
	}

	$output .= theme('node', node_view($node));
	
	ajax_deliver(array('#type' => 'ajax', '#commands' => array (
		array(
			'command' => 'openPopup', 
			'data' => $output,
			'method' => 'html',
		    'selector' => "#dialog-form",
		    'settings' => NULL,
		),
	)));
    
}

function  furnitalia_tweaks_prepare_node_attributes($nodes) {
	
	if (!is_array($nodes)) {
		return array();
	}
	
	$build = array();

    $build += furnitalia_tweaks_node_view_multiple($nodes);

	return $build;
	
}

function furnitalia_tweaks_webform_submission_presave($node, &$submission) {	
	
	if ($node->nid == 32) {
		
		$first_name = $submission->data[1]['value'][0];
		$last_name = $submission->data[2]['value'][0];		
		$email = $submission->data[3]['value'][0];
		$text = $submission->data[4]['value'][0];
		
	}

	/*$submission_array = array();

	$submission_array['oid'] = '00D80000000Jw8P';
	$submission_array['sfga'] = '00D80000000Jw8P';

	if ($submission->nid == 52) { // Request info page
		$submission_array['first_name'] = $submission->data[1]['value'][0];
		$submission_array['last_name'] = $submission->data[6]['value'][0];
		$submission_array['email'] = $submission->data[2]['value'][0];
		$submission_array['phone'] = $submission->data[3]['value'][0];	   
		$submission_array['00N80000002Z2Pz'] = $submission->data[5]['value'][0]; //item
		$description = str_replace("\r\n", " ", $submission->data[4]['value'][0]); //question
		$description = str_replace("''", "in", $description);
		$description = str_replace("'", "", $description);
		$description = str_replace("\"", "", $description);
		$description = strip_tags($description);
		$submission_array['description'] = $description;
	}
	else if ($submission->nid == 157) { // contact us page
		$submission_array['first_name'] = $submission->data[1]['value'][0];
		$submission_array['last_name'] = $submission->data[5]['value'][0];
		$submission_array['email'] = $submission->data[2]['value'][0];
		$submission_array['00N80000002Z2Pz'] = $submission->data[3]['value'][0]; //subject
		$description = str_replace("\r\n", " ", check_plain($submission->data[4]['value'][0])); //body
		$description = str_replace("''", "in", $description);
		$description = str_replace("'", "", $description);
		$description = str_replace("\"", "", $description);
		$description = strip_tags($description);
		$submission_array['description'] = $description;
	}

	$querystring = "";
	foreach($submission_array as $key => $val) {
		$querystring .= "$key=". decode_entities(strip_tags($val));
		$querystring .= "&";
	}

	$URL="www.salesforce.com/servlet/servlet.WebToLead?encoding=UTF-8";
	$ch = curl_init();   
	curl_setopt($ch, CURLOPT_URL,"https://$URL"); 
	curl_setopt($ch, CURLOPT_POST, 1);
	curl_setopt($ch, CURLOPT_POSTFIELDS, "$querystring");
	curl_exec ($ch);    
	curl_close ($ch);
  
  if ($submission->nid == 157) {
    watchdog("Furnitalia", "Contact Us submission saved: " . $submission->data[3]['value'][0], array(), WATCHDOG_INFO, null);
  } else if ($submission->nid == 52) {
    watchdog("Furnitalia", "Request submission saved: " . $submission->data[5]['value'][0], array(), WATCHDOG_INFO, null);
  }*/
}

/**
  * Displays front page content for Furntialia website
 */
function furnitalia_tweaks_front_page() {
	drupal_add_js(drupal_get_path('theme', 'furnitheme') . "/js/jquery.bgpos.js");
	drupal_add_library('system', 'drupal.ajax');
	
	//$sofas_term = taxonomy_term_load(2);
	
	$build = array();
	
	//$build += furnitalia_tweaks_taxonomy_term_page($sofas_term);

	$build['category-preview'] = array(
		'#markup' => '<div id="cat-preview">					
						<div id="category-image-pane">
							<ul class="cat-slider category1 cat-preview" style="display:block">
					  			<li><a href="#" class="category-image"><img src="' .drupal_get_path('theme', 'furnitheme') . "/images/cat-images/all/gilda_lounge.png" . '" title="Furnitalia collections"  /></a></li>
					  		</ul>
					  	</div>
 				  	 </div>',
	);
	
	/*
<ul class="cat-slider-2 category2 cat-preview">
					  			<li><a href="#" class="category-image"><img src="' .drupal_get_path('theme', 'furnitheme') . "/images/category-image-2.png" . '" title="Furnitalia collections" /></a></li>
					  		</ul>
					  		<ul class="cat-slider-3 category3 cat-preview">
					  			<li><a href="#" class="category-image"><img src="' .drupal_get_path('theme', 'furnitheme') . "/images/category-image-3.png" . '" title="Furnitalia collections"  /></a></li>
					  		</ul>
					  		<ul class="cat-slider-4 category4 cat-preview">
					  			<li><a href="#" class="category-image"><img src="' .drupal_get_path('theme', 'furnitheme') . "/images/category-image-4.png" . '" title="Furnitalia collections"  /></a></li>
					  		</ul>
*/
	
	$build['front-anim'] = array (
		'#markup' => '<div id="front-overlay">
						<div id="front-left">&nbsp;</div>
						<div id="front-right">&nbsp;</div>						
						<div id="menu-pic-wrapper">
					  		<div id="menu-pic" class="menu-hover loading">&nbsp;</div>
					  	</div>
					  	<a href="#" id="enterFurnitalia">ENTER FURNITALIA</a>
 				  	 </div>',
	);
	
	drupal_set_title("Modern Furniture Store Sacramento/Roseville");
	
	return $build;
}

/**
  * AJAX callback for products (gallery) page
 */
function furnitalia_tweaks_products_ajax () {
	
	ajax_deliver(array('#type' => 'ajax', '#commands' => array(
		array(
			'command' => 'openPopup', 
			'data' => $output,
			'method' => 'html',
		    'selector' => "#dialog-form",
		    'settings' => NULL,
		),
		//ajax_command_replace('#pagination', $output), 
	)));
}

/**
 * Alters the price with temporary sale price
 */
function furnitalia_tweaks_uc_product_alter(&$node) {
	if (variable_get('show_sale_prices', FALSE)) {
		
		$node->price = isset($node->field_sale_price['und'][0]['value']) && $node->field_sale_price['und'][0]['value'] > 0 ? $node->field_sale_price['und'][0]['value'] : $node->price;

	}
}