<?php
// $Id$

/**
 * @file
 * A module implementing tweaks and misc Drupal API hooks.
 *
 */

/**
* Implements hook_menu()
*/
function furnitalia_tweaks_menu() {
	$items['contact/ajax'] = array (
		'page callback' => 'furnitalia_tweaks_contact_js',
		'access callback' => TRUE, 
		'type' => MENU_CALLBACK,
		#'delivery callback' => 'ajax_deliver',
	);
	$items['user/%user/favorites'] = array(
		'title' => 'My Favorites',
	    'page callback' => 'furnitalia_tweaks_favorites_list',
	    'access callback' => 'user_is_logged_in',
	    'type' => MENU_LOCAL_TASK,
    );

	
	return $items;
}

/**
 * Implements hook_menu_alter().
 */
function furnitalia_tweaks_menu_alter(&$items) {
	$items['taxonomy/term/%taxonomy_term']['page callback'] = 'furnitalia_tweaks_taxonomy_term_page';
	unset($items['taxonomy/term/%taxonomy_term']['file']);
	
	if(isset($items['user/%user/shortcuts'])) {
		unset($items['user/%user/shortcuts']);
	}
	
	if(isset($items['user/%user/imce'])) {
		unset($items['user/%user/imce']);	
	}
	
}

/**
 * Menu callback; displays all nodes associated with a term.
 *
 * @param $term
 *   The taxonomy term.
 * @return
 *   The page content.
 */
function furnitalia_tweaks_taxonomy_term_page($term) {
  // If there is a menu link to this term, the link becomes the last part of
  // the active trail, and the link name becomes the page title. Thus, we must
  // explicitly set the page title to be the term title.
  drupal_set_title($term->name);

  // Build breadcrumb based on the hierarchy of the term.
  $current = (object) array(
    'tid' => $term->tid,
  );  

  // Set the term path as the canonical URL to prevent duplicate content.
  $uri = entity_uri('taxonomy_term', $term);
  drupal_add_html_head_link(array('rel' => 'canonical', 'href' => url($uri['path'], $uri['options'])), TRUE);
  // Set the non-aliased path as a default shortlink.
  drupal_add_html_head_link(array('rel' => 'shortlink', 'href' => url($uri['path'], array_merge($uri['options'], array('alias' => TRUE)))), TRUE);

  // Normally we would call taxonomy_term_show() here, but for backwards
  // compatibility in Drupal 7 we do not want to do that (it produces different
  // data structures and HTML markup than what Drupal 7 released with). Calling
  // taxonomy_term_view() directly provides essentially the same thing, but
  // allows us to wrap the rendered term in our desired array structure.
  $build['term_heading'] = array(
    '#prefix' => '<div class="term-listing-heading">',
    '#suffix' => '</div>',
    'term' => taxonomy_term_view($term, 'full'),
  );

  if ($nids = taxonomy_select_nodes($term->tid, TRUE, variable_get('default_nodes_main', 10))) {
    $nodes = node_load_multiple($nids);
    //dsm($nodes);
    
    $build += furnitalia_tweaks_prepare_node_attributes($nodes);
    
  }
  else {
    $build['no_content'] = array(
      '#prefix' => '<p>',
      '#markup' => t('There is currently no content classified with this term.'),
      '#suffix' => '</p>',
    );
  }
  return $build;
}

/**
 * Construct a drupal_render() style array from an array of loaded nodes.
 *
 * @param $nodes
 *   An array of nodes as returned by node_load_multiple().
 * @param $view_mode
 *   View mode, e.g. 'full', 'teaser'...
 * @param $weight
 *   An integer representing the weight of the first node in the list.
 * @param $langcode
 *   (optional) A language code to use for rendering. Defaults to the global
 *   content language of the current request.
 *
 * @return
 *   An array in the format expected by drupal_render().
 */
function furnitalia_tweaks_node_view_multiple($nodes, $view_mode = 'teaser', $weight = 0, $langcode = NULL) {
  field_attach_prepare_view('node', $nodes, $view_mode, $langcode);
  entity_prepare_view('node', $nodes, $langcode);
  $build = array();
  foreach ($nodes as $node) {
  	$node->index = $weight + 1;
    $build['nodes'][$node->nid] = node_view($node, $view_mode, $langcode);
    $build['nodes'][$node->nid]['#weight'] = $weight;
    $weight++;
  }
  $build['nodes']['#prefix'] = '<div id="gallery-container">';
  $build['nodes']['#suffix'] = '</div>';
  $build['nodes']['#sorted'] = TRUE;
  return $build;
}

/**
 * Implements hook_page_alter().
 */
function furnitalia_tweaks_page_alter(&$page) {
	
	/*$result = db_query("
	  SELECT DISTINCT td.tid, td.name FROM {taxonomy_term_data} td
	  INNER JOIN {taxonomy_term_hierarchy} h on td.tid=h.tid and h.parent=0
	  LEFT JOIN {taxonomy_index} tn on tn.tid = td.tid
	  LEFT JOIN {node} n on n.nid=tn.nid and n.status=1
	  INNER JOIN {field_data_field_brand} b on b.entity_id=n.nid and b.field_brand_tid=:brand
	  WHERE td.vid = :vid", array(":brand" => 21, ":vid" => 2));*/
	  
	$result = db_query("
	  SELECT DISTINCT td.tid, td.name FROM {taxonomy_term_data} td
	  INNER JOIN {taxonomy_term_hierarchy} h on td.tid=h.tid and h.parent=0
	  LEFT JOIN {taxonomy_index} tn on tn.tid = td.tid
	  LEFT JOIN {node} n on n.nid=tn.nid and n.status=1
	  WHERE td.vid = :vid", array( ":vid" => 2));


	$items = array();
	foreach($result as $term) {
	  $items[] = l($term->name, 'taxonomy/term/' . $term->tid);
	}

	$page['left']['furn_menu'] = array(
		'#theme' => 'item_list',
		'#items' => $items,
		'#type' => 'ul',
		'#attributes' => array('class' => 'links'),
	);

	
	/*$result = db_query("
	  SELECT DISTINCT td.tid, td.name FROM {taxonomy_term_data} td
	  INNER JOIN {taxonomy_term_hierarchy} h on td.tid=h.tid and h.parent=:parent_cat
	  LEFT JOIN {taxonomy_index} tn on tn.tid = td.tid
	  LEFT JOIN {node} n on n.nid=tn.nid and n.status=1
	  INNER JOIN {field_data_field_brand} b on b.entity_id=n.nid and b.field_brand_tid=:brand
	  WHERE td.vid = :vid", array(":parent_cat" => 1, ":brand" => 21, ":vid" => 2));	*/
	  
	$result = db_query("
	  SELECT DISTINCT td.tid, td.name FROM {taxonomy_term_data} td
	  INNER JOIN {taxonomy_term_hierarchy} h on td.tid=h.tid and h.parent=:parent_cat
	  LEFT JOIN {taxonomy_index} tn on tn.tid = td.tid
	  LEFT JOIN {node} n on n.nid=tn.nid and n.status=1
	  WHERE td.vid = :vid", array(":parent_cat" => 1, ":vid" => 2));
	

	$items = array();
	foreach($result as $term) {
	  $items[] = l($term->name, 'taxonomy/term/' . $term->tid);
	}

	$page['content_top']['furn_top_menu'] = array(
		'#theme' => 'item_list',
		'#items' => $items,
		'#type' => 'ul',
		'#attributes' => array('class' => 'links inline'),
	);
	
	//dsm($page);
	if (isset($page['content']['system_main']['options'])) {
		$page['left']['options'] = $page['content']['system_main']['options'];
		unset($page['content']['system_main']['options']);		
	}
}

function furnitalia_tweaks_form_alter(&$form, &$form_state, $form_id){
	if ($form['#id'] == 'item-node-form') {
		//dsm($form);
		
		//place video field in tabs
	    $form['item_video'] = array(
	        '#type' => 'fieldset',
	        '#title' => t('Item Video'),
	        '#collapsible' => TRUE,
	        '#collapsed' => FALSE,
	        '#group' => 'additional_settings',
	        '#weight' => -2, //Tab location
	    );
	    $form['item_video']['und'][0] = $form['field_video'];
	    unset($form['field_video']);
	    
	    $form['buttons']['#weight'] = 100;
	    
	    //put field ALU in product info
	    $form['base']['field_alu'] = $form['field_alu']['und'][0];
		$form['base']['field_alu']['#weight'] = 1;
		
		//put sale price in product info
		$form['field_sale_price']['und'][0]['value']['#attributes'] = array('size'=> array("15"));
		$form['field_sale_price']['und'][0]['value']['#default_value'] = 0;
		$form['base']['prices']['field_sale_price'] = $form['field_sale_price'];
		$form['base']['prices']['list_price']['#title'] = "MSRP";
		$form['base']['prices']['sell_price']['#title'] = "Furnitalia";
		
		//unset old values
		unset($form['base']['prices']['cost']);
		unset($form['base']['pkg_qty']);
		unset($form['base']['ordering']);		
	    unset($form['field_sale_price']);
		unset($form['field_alu']);
		unset($form['revision_information']);
		unset($form['author']);		

    }
}

/**
 * Display the list of items that are in current user's favorites list
 */
function furnitalia_tweaks_favorites_list() {
	global $user;
	
	$favorites = flag_get_user_flags('node', NULL, $user->uid);
	
	if(!isset($favorites['favorites']) || empty($favorites['favorites'])) {
		return "Your favorites list is empty. You can add items to favorites by clicking on 'Add to favorites' button on item info page";
	}
	
	$nids = array();
	
	foreach($favorites['favorites'] as $nid => $flag_obj) {
		$nids []= $nid;
	}
	
	dsm($favorites);
	
	$nodes = node_load_multiple($nids);    
    $build = furnitalia_tweaks_prepare_node_attributes($nodes);
    
    unset($build['options']);

	
	//print flag_create_link('favorites', $node->nid); 
	
	return $build;
}

/**
  * Display contact form in pop-up dialog box.
 */
function furnitalia_tweaks_contact_js($nid=NULL){

	$nid = 32;

	$output = "";
	$node = node_load($nid);
	$output .= theme('node', node_view($node));
	
	//return drupal_json_output(array('status' => TRUE, 'data' => $output, 'wrapperID' => drupal_html_id('webform-ajax-wrapper-' . $nid)));
	//ajax_command_replace('#dialog-form', $output), 	
	//$output = array('#type' => 'ajax', '#commands' => array(array('command' => 'openPopup', 'data' => $output)));
	
	ajax_deliver(array('#type' => 'ajax', '#commands' => array(
		array(
			'command' => 'openPopup', 
			'data' => $output,
			'method' => 'html',
		    'selector' => "#dialog-form",
		    'settings' => NULL,
		),
		//ajax_command_replace('#pagination', $output), 
	)));
	
	//return array('#type' => 'ajax', '#commands' => array(
	//	ajax_command_replace('#pagination', $output), 
	//));
    
}

function  furnitalia_tweaks_prepare_node_attributes($nodes) {
	
	if (!is_array($nodes)) {
		return array();
	}
	
	//prepare sort options
    //-----------------------------    
    $build['options'] = array(
    	'#prefix' => '<section id="options" class="clearfix">',
    	'#suffix' => '</section>',
    );
    $build['options']['sort'] = array(
		'#attributes' => array('id' => 'sort-by','class' => array('clearfix', 'option-set', 'dk', 'sortBy'), 'data-option-key' => 'sortBy', 'name' => 'sortBy', 'tabindex' => '1'),
		'#type' => 'select',
		'#title' => t('Sort'),
		'#options' => array(
			'sortBy=original-order' => 'Default',
			'sortBy=price'	=> 'Price',
			'sortBy=index' => 'Index',
			'sortBy=clearance' => 'Clearance',
		),
		'#extra_option_attributes' => array (
			'data-option-value="original-order"',
			'data-option-value="price"',
			'data-option-value="index"',
			'data-option-value="clearance"',
		),
		'#default_value' => 'sortBy=original-order',
    );
    
    //prepare Filter options
    //-----------------------------
    //determine all taxonomy terms
    $brands = array("*" => 'show all');
    foreach($nodes as $node) {
    	$tid = $node->field_brand['und'][0]['tid'];
	    if (!isset($brands [$tid])) {
	    	$term = taxonomy_term_load($tid);
		 	$brands[$tid] = $term->name;
	    }
    }
    
    $extra_options = array();
    foreach($brands as $tid => $category) {
    	if ($tid == "*") {
		     $extra_options []= 'data-filter="*"';
	    } else {
		 	$extra_options []= 'data-filter=".brand'. $tid .'"';  
	    }
    }
    
    $build['options']['filter'] = array(
		'#attributes' => array('id' => 'filters','class' => array('clearfix', 'option-set', 'dk', 'sortBy'), 'data-option-key' => 'filterBy', 'name' => 'filterBy', 'tabindex' => '2'),
		'#type' => 'select',
		'#title' => t('Filter'),
		'#options' => $brands,
		'#extra_option_attributes' => $extra_options,
		'#default_value' => '*',
    );
    
    $build += furnitalia_tweaks_node_view_multiple($nodes);
    $build['pager'] = array(
      //'#theme' => 'pager',
      //'#weight' => 5,
      '#prefix' => '<div id="pagination">',
      '#suffix' => '</div>',
    );

	return $build;
	
}

function furnitalia_tweaks_webform_submission_presave($node, &$submission) {	
	
	if ($node->nid == 32) {
		
		$first_name = $submission->data[1]['value'][0];
		$last_name = $submission->data[2]['value'][0];		
		$email = $submission->data[3]['value'][0];
		$text = $submission->data[4]['value'][0];
		
	}

	/*$submission_array = array();

	$submission_array['oid'] = '00D80000000Jw8P';
	$submission_array['sfga'] = '00D80000000Jw8P';

	if ($submission->nid == 52) { // Request info page
		$submission_array['first_name'] = $submission->data[1]['value'][0];
		$submission_array['last_name'] = $submission->data[6]['value'][0];
		$submission_array['email'] = $submission->data[2]['value'][0];
		$submission_array['phone'] = $submission->data[3]['value'][0];	   
		$submission_array['00N80000002Z2Pz'] = $submission->data[5]['value'][0]; //item
		$description = str_replace("\r\n", " ", $submission->data[4]['value'][0]); //question
		$description = str_replace("''", "in", $description);
		$description = str_replace("'", "", $description);
		$description = str_replace("\"", "", $description);
		$description = strip_tags($description);
		$submission_array['description'] = $description;
	}
	else if ($submission->nid == 157) { // contact us page
		$submission_array['first_name'] = $submission->data[1]['value'][0];
		$submission_array['last_name'] = $submission->data[5]['value'][0];
		$submission_array['email'] = $submission->data[2]['value'][0];
		$submission_array['00N80000002Z2Pz'] = $submission->data[3]['value'][0]; //subject
		$description = str_replace("\r\n", " ", check_plain($submission->data[4]['value'][0])); //body
		$description = str_replace("''", "in", $description);
		$description = str_replace("'", "", $description);
		$description = str_replace("\"", "", $description);
		$description = strip_tags($description);
		$submission_array['description'] = $description;
	}

	$querystring = "";
	foreach($submission_array as $key => $val) {
		$querystring .= "$key=". decode_entities(strip_tags($val));
		$querystring .= "&";
	}

	$URL="www.salesforce.com/servlet/servlet.WebToLead?encoding=UTF-8";
	$ch = curl_init();   
	curl_setopt($ch, CURLOPT_URL,"https://$URL"); 
	curl_setopt($ch, CURLOPT_POST, 1);
	curl_setopt($ch, CURLOPT_POSTFIELDS, "$querystring");
	curl_exec ($ch);    
	curl_close ($ch);
  
  if ($submission->nid == 157) {
    watchdog("Furnitalia", "Contact Us submission saved: " . $submission->data[3]['value'][0], array(), WATCHDOG_INFO, null);
  } else if ($submission->nid == 52) {
    watchdog("Furnitalia", "Request submission saved: " . $submission->data[5]['value'][0], array(), WATCHDOG_INFO, null);
  }*/
}
